# -*- coding: utf-8 -*-
"""Predictive Analysis : Mobile Price Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FqMhHLE_k1ghJO6lHJuzle2-Aun4BeXW

# Import library
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

import kagglehub as kh

pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)

"""# Load dataset

Dataset yang digunakan yaitu Mobile Price Classification yang diperoleh dari platform Kaggle.
"""

path = kh.dataset_download("iabhishekofficial/mobile-price-classification")

df = pd.read_csv(f"{path}/train.csv")
df.head()

"""# Exploratory Data Analysis"""

df.info()

"""

*   Terdapat 2000 baris data.
*   Terdapat 20 kolom data, dengan kolom price_range sebagai target.
*   Terdapat 18 kolom bertipe data int64 dan 2 kolom bertipe data float64.
*   Tidak ada baris data yang null.

"""

df.describe()

"""Dari output dapat dilihat deskripsi statistik tiap variabel"""

df.duplicated().sum()

"""Tidak terdapat data yang duplikat"""

df['price_range'].value_counts().plot(kind='bar')

"""Dari output menunjukan persebaran data yang seimbang untuk setiap label

## Feature & Labels
"""

X = df.drop('price_range', axis=1)
y = df['price_range']

"""## Categorical and Numerical Features"""

num_col = [col for col in X.columns if df[col].nunique() >= 10]
cat_col = [col for col in X.columns if col not in num_col]

print(f"Numerical features: {num_col}")
print(f"Categorical features: {cat_col}")

"""## Univariative EDA"""

for col in num_col:
    plt.figure(figsize=(8, 6))
    sns.boxplot(y=df[col], color='lightblue')
    plt.title(f'Box Plot of {col}')
    plt.xlabel(col)
    plt.show()

for col in cat_col:
    plt.figure(figsize=(8, 6))

    colors = sns.color_palette('pastel')[0:len(df[col].value_counts())]

    df[col].value_counts().plot(kind='bar', color=colors)

    plt.title(f'Histogram of {col}', fontsize=14)
    plt.xlabel(col, fontsize=12)
    plt.ylabel('Frequency', fontsize=12)
    plt.xticks(rotation=45, ha='right', fontsize=10)
    plt.tight_layout()
    plt.show()

"""## Multivariate EDA"""

plt.figure(figsize=(12, 10))
sns.heatmap(df.corr(), annot=True, cmap='RdBu_r', fmt=".2f", linewidths=.5)
plt.title("Correlation Matrix", fontsize=16)
plt.tight_layout()
plt.show()

"""Dari heatmap dapat dilihat bahwa hampir seluruh fitur memiliki korelasi yang rendah terhadap targat, kecuali fitur ram

# Train Test Split
"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Make Pipeline"""

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), num_col),
        ('cat', OneHotEncoder(), cat_col)
    ])

pipeline = Pipeline(steps=[('preprocessor', preprocessor)])

X_train_transformed = pipeline.fit_transform(X_train)
X_test_transformed = pipeline.transform(X_test)

"""# Modelling and Evaluation"""

# Model 1: Logistic Regression
logreg_model = LogisticRegression()
logreg_model.fit(X_train_transformed, y_train)
logreg_predictions = logreg_model.predict(X_test_transformed)
print("Logistic Regression:")
print(classification_report(y_test, logreg_predictions))

# Model 2: Decision Tree
dt_model = DecisionTreeClassifier()
dt_model.fit(X_train_transformed, y_train)
dt_predictions = dt_model.predict(X_test_transformed)
print("\nDecision Tree:")
print(classification_report(y_test, dt_predictions))

# Model 3: Random Forest
rf_model = RandomForestClassifier()
rf_model.fit(X_train_transformed, y_train)
rf_predictions = rf_model.predict(X_test_transformed)
print("\nRandom Forest:")
print(classification_report(y_test, rf_predictions))

model_names = ['Logistic Regression', 'Decision Tree', 'Random Forest']
accuracy_scores = [
    accuracy_score(y_test, logreg_predictions),
    accuracy_score(y_test, dt_predictions),
    accuracy_score(y_test, rf_predictions)
]

plt.figure(figsize=(8, 6))
plt.bar(model_names, accuracy_scores, color=['blue', 'green', 'purple'])
plt.title('Accuracy Comparison of Models', fontsize=14)
plt.xlabel('Model', fontsize=12)
plt.ylabel('Accuracy', fontsize=12)
plt.ylim(0, 1)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""Dari hasil pemodelan diperoleh model yang dapat digunakan untuk klasifikasi harga telepon mobile, dimana model dengan akurasi terbaik yaitu model Logistik Regression dengan akurasi 97%"""